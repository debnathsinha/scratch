# include<mpi.h>
# include<stdio.h>
# include<string.h>

int arr[2][10][10];
int p;

int min(int a,int b)
{
  if(a<b)
    return a;
  else
    return b;
}

/*
void top()
{
  int source,destn,i,j;
  double *val;
  MPI_Status stat;
  t=(double *)malloc(sizeof(MPI_DOUBLE)*(n));
  val=(double *)malloc(sizeof(MPI_DOUBLE)*(n));
  if(starti==1)
    {
      printf("Processor %d entered here in top() the first row\n",pid);
      for(i=0;i<endi-starti+1;i++)
	t[i]=0;
      destn=pid+sqrtp;
      for(i=0,j=startj;i<endi-starti+1;i++,j++)
	val[i]=arr[endi][j];
      if(destn<p&&destn>=0)
	{
	  MPI_Send(val,endi-starti+1,MPI_DOUBLE,destn,0,MPI_COMM_WORLD);
	  printf("processor %d sent bottom to %d of which the first value is %lf\n",pid,destn,val[0]);
	}
      return;
    }
  source=pid-sqrtp;

  MPI_Recv(t,endi-starti+1,MPI_DOUBLE,source,0,MPI_COMM_WORLD,&stat);
  printf("Processor %d received top from %d of which first value is %lf\n",pid,source,t[0]);
  if(endi!=n-2)
    {
      for(i=0,j=starti;i<endi-starti+1;i++,j++)
	val[i]=arr[endi][j];
      destn=pid+sqrtp;
      MPI_Send(val,endi-starti+1,MPI_DOUBLE,destn,0,MPI_COMM_WORLD);
    }
}
*/

void init()
{
  void init()
    {
      int i,j;
      for(i=starti;i<endi;i++)
	for(j=startj;j<endj;j++)
	  {
	    if(i==0)
	      arr[i][j]=0.0;
	    else if(i==n-1)
	      arr[i][j]=1+j/(n-1);
	    else if(j==0)
	      arr[i][j]=i/(n-1);
	    else if(j==(n-1))
	      arr[i][j]=2*i/(n-1);
	    else
	      arr[i][j]=0.5;
	  }
    }

}

int main(int argc,char *argv[])
{
  MPI_Init(&argc,&argv);
  int i,j,tempn;
  int n=10,p,pid;
  int start,end;
  double start_time,end_time;
  MPI_Comm_size(MPI_COMM_WORLD,&p);
  MPI_Comm_rank(MPI_COMM_WORLD,&pid);
  
  start_time=MPI_Wtime();

  if(pid==0)
    {
      printf("There are %d processors\n",p);
    }

  start= n/(p-1)*pid;
  end= min(start+p-1,n-1);

  printf(" Processor %d takes from %d to %d",pid,start,end);

  init();

  end_time=MPI_Wtime();

  MPI_Finalize();
  return 0;
}


